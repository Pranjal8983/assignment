#Can you explain the benefits of using a virtual environment for python applications?
Using a virtual environment for Python applications offers several benefits:
Dependency Isolation:Virtual environments create isolated spaces for each project,
preventing conflicts between different projects that might require different versions of the same library.
Reproducibility and Portability:By creating a requirements.txt file within a virtual environment
, we can easily document and share the exact dependencies and their versions needed for a project.
Cleaner System-Wide Python Installation:Virtual environments prevent the cluttering of our global
Python installation with project-specific packages.
This keeps our system Python clean and stable, avoiding potential issues with system-level scripts
or other applications relying on the global installation.
Testing with Different Python Versions:we can create virtual environments with different Python versions, 
allowing us to test our application's compatibility across various Python releases without affecting our main Python installation.
Enhanced Security: Isolating dependencies within a virtual environment can mitigate risks associated with
unintentional library upgrades or security vulnerabilities that might affect a global installation.
==================================================================================
#DNS resolution within Kubernete

Kubernetes provides an internal DNS, which resolves service names to cluster IPs.

When we create a Service named mongo in namespace default, its DNS name is 
mongo.default.svc.cluster.local. Pods can simply use mongo and the environment & kube DNS will resolve to the ClusterIP.
========================================================================
#explanation of resource requests and limits in Kubernetes
When we specify a Pod, we can optionally specify how much of each resource a container needs. 
The most common resources to specify are CPU and memory (RAM); there are others.
When we specify the resource request for containers in a Pod, the kube-scheduler
uses this information to decide which node to place the Pod on. When we specify 
a resource limit for a container, the kubelet enforces those limits so that the 
running container is not allowed to use more of that resource than the limit we set. 
The kubelet also reserves at least the request amount of that system resource specifically 
for that container to use
============================================================================================
#Choices & Rationale
Two-Tier Architecture (Flask App + MongoDB)
Clean separation of concerns—Flask handles HTTP/API logic while MongoDB manages persistent data.
Allows independent scaling of the web tier without affecting the database.
Persistent Volumes (PV/PVC)
MongoDB needs durable data across pod restarts.

Resource Requests & Limits
Values used:
Requests: 200m CPU, 250Mi memory
Limits: 500m CPU, 500Mi memory
Provides a balance—enough headroom for normal load while preventing runaway resource usage.
Horizontal Pod Autoscaler (HPA)
Scales the Flask app automatically from 2–5 replicas when CPU > 70 %. Handles burst traffic gracefully.
=================================================================================================
Traffic Simulation
To drive CPU usage above 70 %, we used kubectl run to create a temporary load-generator pod running busybox and ab
kubectl run loadgen --image=busybox --restart=Never -- \
  /bin/sh -c "while true; do wget -q -O- http://flask-service:5000/ > /dev/null; done"
to continuously hits the / endpoint inside the cluster.

Initial State: kubectl get hpa showed 2 replicas, CPU ~15 %.

After ~2–3 minutes of sustained load: CPU utilization rose to ~85 %, HPA scaled replicas from 2 → 3 → 4.

At Peak: Stabilized at 4 replicas to keep CPU near the 70 % target.

Cooldown: After traffic stopped, replicas gradually scaled back to 2 within 5–10 minutes.
================================================================================================


